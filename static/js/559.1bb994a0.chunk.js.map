{"version":3,"file":"static/js/559.1bb994a0.chunk.js","mappings":"mLACA,EAA6B,4BAA7B,EAAqE,2BAArE,EAA8G,6BCA9G,EAAuB,0B,SCMhB,SAASA,EAAaC,GACzB,OAEI,gBAAKC,UAAWC,EAAhB,SACKF,EAAMG,U,sBCVnB,EAAuB,mBCOhB,SAASC,EAAKJ,GACjB,OACI,0BACI,SAAC,KAAD,CAASK,GAAI,YAAcL,EAAMM,OACxBL,UAAWC,EADpB,SAEKF,EAAMO,S,2CCRjBC,GAAYC,EAAAA,EAAAA,GAAiB,IAmBtBC,GAAmBC,EAAAA,EAAAA,GAAU,CACtCC,KAAM,yBADsBD,EAlBL,SAACX,GAExB,OACI,kBAAMa,SAAUb,EAAMc,aAAtB,WACI,0BACI,SAACC,EAAA,EAAD,CACIC,SAAU,CAACC,EAAAA,EAAcT,GACzBU,YAAY,eACZX,KAAK,qBACLY,UAAWC,EAAAA,OAEnB,0BACI,8C,oBCiBhB,GAAeC,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAxBoB,SAACC,GACrB,MAAO,CACHC,SAAUD,EAAME,YAAYD,SAC5BE,aAAcH,EAAME,YAAYC,iBAGb,SAACC,GACxB,MAAO,CACHC,mBAAoB,SAACC,GACjBF,GAASG,EAAAA,EAAAA,GAAqBD,SAgBtCE,EAAAA,EAFJ,EC3BwC,SAAC/B,GAQrC,OACI,iBAAKC,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACKF,EAAMwB,SAASQ,KAAI,SAAAC,GACZ,OACI,SAAC7B,EAAD,CAEIG,KAAM0B,EAAG1B,KACTD,OAAQ2B,EAAG3B,QAFN2B,EAAG3B,cAS5B,iBAAKL,UAAWC,EAAhB,WAEI,SAACQ,EAAD,CACIG,SAvBQ,SAACqB,GACrBlC,EAAM4B,mBAAmBM,EAAMC,uBAwBtBnC,EAAM0B,aAAaM,KAAI,SAAAC,GAChB,OACI,SAAClC,EAAD,CAEII,QAAS8B,EAAG9B,SADP8B,EAAGG","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://samurai-way/./src/components/Dialogs/MessageUser/MessageUser.module.css?fcc4","components/Dialogs/MessageUser/MessageUser.tsx","webpack://samurai-way/./src/components/Dialogs/User/User.module.css?cd91","components/Dialogs/User/User.tsx","components/Dialogs/MessageForm.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogList\":\"Dialogs_dialogList__Ayh1K\",\"allPerson\":\"Dialogs_allPerson__hc1h9\",\"messagesAll\":\"Dialogs_messagesAll__QrnYL\"};","// extracted by mini-css-extract-plugin\nexport default {\"text\":\"MessageUser_text__PI3pF\"};","import st from './MessageUser.module.css'\r\n\r\n\r\n\r\ntype MesUserType={\r\n    message:string\r\n}\r\nexport function MessageUser (props:MesUserType) {\r\n    return(\r\n\r\n        <div className={st.text}>\r\n            {props.message}\r\n\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"name\":\"User_name__RT4N5\"};","import {NavLink} from \"react-router-dom\";\r\nimport st from \"./User.module.css\";\r\n\r\ntype UserType = {\r\n    name: string\r\n    idName: number\r\n}\r\n\r\nexport function User(props: UserType) {\r\n    return (\r\n        <div>\r\n            <NavLink to={'/dialogs/' + props.idName}\r\n                     className={st.name}>\r\n                {props.name}</NavLink>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../common/FormsErrorStule/FormsErrorTextarea\";\r\nimport {maxLengthCreater, requiredField} from \"../../utils/validators/validators\";\r\n\r\nconst maxLength = maxLengthCreater(15)\r\nexport const MessageForm = (props: any) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    validate={[requiredField,maxLength]}\r\n                    placeholder='your message'\r\n                    name='newMessageFromForm'\r\n                    component={Textarea}/>\r\n            </div>\r\n            <div>\r\n                <button>added</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const MessageReduxForm = reduxForm({\r\n    form: 'creatingMessageInForm'\r\n})(MessageForm)","\r\nimport {\r\n    addedMessageStatetAC, MessageType, UserNameType\r\n} from \"../../redux/reduser/dialogReduсer\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {StateType} from \"../../redux/reduser/reduxStore\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport React, {FC} from \"react\";\r\nimport {HocRedirectLogin} from \"../../hoc/RedirectLogin\";\r\n\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => {\r\n    return {\r\n        userName: state.dialogState.userName,\r\n        messageState: state.dialogState.messageState\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addedMessageStatet: (newMessage:string) => {\r\n            dispatch(addedMessageStatetAC(newMessage))\r\n        }\r\n    }\r\n}\r\ntype MapStatePropsType = {\r\n    userName: Array<UserNameType>\r\n    messageState: Array<MessageType>\r\n}\r\ntype MapDispatchPropsType = {\r\n    addedMessageStatet: (newMessage:string) => void\r\n}\r\n\r\nexport type DialogsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nexport default compose<FC>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    HocRedirectLogin\r\n)(Dialogs)\r\n\r\n\r\n\r\n\r\n\r\n","import st from './Dialogs.module.css'\r\nimport {MessageUser} from \"./MessageUser/MessageUser\";\r\nimport React, {FC} from \"react\";\r\nimport {User} from \"./User/User\";\r\nimport {DialogsType} from './DialogsContainer';\r\nimport {MessageReduxForm} from \"./MessageForm\";\r\n\r\n\r\nexport const Dialogs: FC<DialogsType> = (props) => {\r\n\r\n\r\n    const onSubmitHandler = (value: any) => {\r\n        props.addedMessageStatet(value.newMessageFromForm)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={st.dialogList}>\r\n            <div className={st.allPerson}>\r\n                {props.userName.map(el => {\r\n                        return (\r\n                            <User\r\n                                key={el.idName}\r\n                                name={el.name}\r\n                                idName={el.idName}/>\r\n                        )\r\n                    }\r\n                )\r\n                }\r\n            </div>\r\n\r\n            <div className={st.messagesAll}>\r\n\r\n                <MessageReduxForm\r\n                    onSubmit={onSubmitHandler}/>\r\n\r\n                {props.messageState.map(el => {\r\n                        return (\r\n                            <MessageUser\r\n                                key={el.id}\r\n                                message={el.message}\r\n                            />\r\n                        )\r\n                    }\r\n                )\r\n                }\r\n\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}"],"names":["MessageUser","props","className","st","message","User","to","idName","name","maxLength","maxLengthCreater","MessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","validate","requiredField","placeholder","component","Textarea","compose","connect","state","userName","dialogState","messageState","dispatch","addedMessageStatet","newMessage","addedMessageStatetAC","HocRedirectLogin","map","el","value","newMessageFromForm","id"],"sourceRoot":""}